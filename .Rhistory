n <- 250
x <- c(runif(n-2, 0, 4), 2, 2.1)
y <- 2*x + rnorm(n, sd=2)
draw.data <- data.frame(x=x,y=y)
shiny::runApp()
may_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/5/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# June
june_Date <- fread("https://www.wunderground.com/history/airport/KBOS/2016/6/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# July
july_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/7/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# August
august_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/8/31/MonthlyHistory.html?req_city=Boston&req_state=MA&req_statename=Massachusetts&reqdb.zip=02120&reqdb.magic=1&reqdb.wmo=99999&format=1')
# September
september_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/9/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1')
# October
october_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/10/31/MonthlyHistory.html?req_city=Boston&req_state=MA&req_statename=Massachusetts&reqdb.zip=02120&reqdb.magic=1&reqdb.wmo=99999&format=1')
# November
november_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/11/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# Combining the Data
boston_Temp <- rbind(may_Data,june_Date,july_Data,august_Data,september_Data,
october_Data,november_Data)
rm(list = ls())
may_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/5/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# June
june_Date <- fread("https://www.wunderground.com/history/airport/KBOS/2016/6/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# July
july_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/7/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# August
august_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/8/31/MonthlyHistory.html?req_city=Boston&req_state=MA&req_statename=Massachusetts&reqdb.zip=02120&reqdb.magic=1&reqdb.wmo=99999&format=1')
# September
september_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/9/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1')
# October
october_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/10/31/MonthlyHistory.html?req_city=Boston&req_state=MA&req_statename=Massachusetts&reqdb.zip=02120&reqdb.magic=1&reqdb.wmo=99999&format=1')
# November
november_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/11/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
rbind(may_Data,june_Date,july_Data,august_Data,september_Data,
october_Data,november_Data)
rbind(may_Data,june_Date,july_Data,august_Data,september_Data,
october_Data,november_Data,fill = TRUE)
View(august_Data)
View(july_Data)
runApp()
mydata()
n <- 250
x <- c(runif(n-2, 0, 4), 2, 2.1)
y <- 2*x + rnorm(n, sd=2)
draw.data <- data.frame(x=x,y=y)
mydata <- draw.data
mydata()
mydata <- draw.data
mydata
mydata()
runApp()
runApp()
COL[1,2]
?COL[1,2]
?COL
??COL
if (!("plotrix" %in% names(installed.packages()[,"Package"]))) {install.packages("plotrix")}
suppressMessages(library(plotrix, quietly = TRUE))
if (!("plotrix" %in% names(installed.packages()[,"Package"]))) {install.packages("plotrix")}
suppressMessages(library(plotrix, quietly = TRUE))
if (!("shiny" %in% names(installed.packages()[,"Package"]))) {install.packages("shiny")}
suppressMessages(library(shiny, quietly = TRUE))
if (!("openintro" %in% names(installed.packages()[,"Package"]))) {install.packages("openintro")}
suppressMessages(library(openintro, quietly = TRUE))
runApp()
runApp()
runApp()
temperatureNew$Date[(nrow(temperatureNew))]
runApp()
temperatureNew$Date[(nrow(temperatureNew))]
temperatureNew$Date
# May
may_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/5/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# June
june_Date <- fread("https://www.wunderground.com/history/airport/KBOS/2016/6/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# July
july_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/7/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# August
august_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/8/31/MonthlyHistory.html?req_city=Boston&req_state=MA&req_statename=Massachusetts&reqdb.zip=02120&reqdb.magic=1&reqdb.wmo=99999&format=1')
# September
september_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/9/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1')
# October
october_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/10/31/MonthlyHistory.html?req_city=Boston&req_state=MA&req_statename=Massachusetts&reqdb.zip=02120&reqdb.magic=1&reqdb.wmo=99999&format=1')
# November
november_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/11/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# Combining the Data
boston_Temp <- rbind(may_Data,june_Date,july_Data,august_Data,september_Data,
october_Data,november_Data,fill = TRUE)
# [NOTE: Removing the wind direction column]
temperatureNew <- boston_Temp %>%
dplyr::select(-length(boston_Temp)) %>%
dplyr::rename(Date = EDT)
temperatureNew$Date <- as.Date.character(temperatureNew$Date, "%Y-%m-%d")
# [NOTE: Changing the events based on dates]
temperatureNew$Events <- rapply(as.list(temperatureNew$Events),function(x){ifelse(x == "","Normal",x)})
temperatureNew$Events <- rapply(as.list(temperatureNew$Events),function(x){ifelse(x == "Rain-Thunderstorm","Thunderstorm",x)})
temperatureNew$Events <- rapply(as.list(temperatureNew$Events),function(x){ifelse(x == "Fog-Rain","Rain",x)})
temperatureNew$Events <- rapply(as.list(temperatureNew$Events),function(x){ifelse(x == "Fog-Rain-Thunderstorm","Thunderstorm",x)})
# [NOTE: Adding Comfortable Zones]
temperatureNew$`MeanDew PointF`
temperatureNew$CZone <- "NA"
temperatureNew$CZone <- ifelse(temperatureNew$`MeanDew PointF` <= 60,"Comfortable",temperatureNew$CZone)
temperatureNew$CZone <- ifelse(temperatureNew$`MeanDew PointF` > 60 & temperatureNew$`MeanDew PointF` <= 75,
"Sticky",temperatureNew$CZone)
temperatureNew$CZone <- ifelse(temperatureNew$`MeanDew PointF` > 75,
"Miserable",temperatureNew$CZone)
temperatureNew$Month <- format(temperatureNew$Date, "%B")
View(temperatureNew)
november_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/11/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
View(november_Data)
rbind(may_Data,june_Date,july_Data,august_Data,september_Data,
october_Data,november_Data,)
rbind(may_Data,june_Date,july_Data,august_Data,september_Data,
october_Data,november_Data)
rm(list = ls())
may_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/5/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# June
june_Date <- fread("https://www.wunderground.com/history/airport/KBOS/2016/6/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# July
july_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/7/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
# August
august_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/8/31/MonthlyHistory.html?req_city=Boston&req_state=MA&req_statename=Massachusetts&reqdb.zip=02120&reqdb.magic=1&reqdb.wmo=99999&format=1')
# September
september_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/9/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1')
# October
october_Data <- fread('https://www.wunderground.com/history/airport/KBOS/2016/10/31/MonthlyHistory.html?req_city=Boston&req_state=MA&req_statename=Massachusetts&reqdb.zip=02120&reqdb.magic=1&reqdb.wmo=99999&format=1')
# November
november_Data <- fread("https://www.wunderground.com/history/airport/KBOS/2016/11/1/MonthlyHistory.html?req_city=&req_state=&req_statename=&reqdb.zip=&reqdb.magic=&reqdb.wmo=&format=1")
rbind(may_Data,june_Date,july_Data,august_Data,september_Data,
october_Data,november_Data)
rbind(may_Data,june_Date)
rbind(may_Data,june_Date,july_Data)
rbind(may_Data,june_Date,july_Data,august_Data)
rbind(may_Data,june_Date,july_Data,august_Data,september_Data)
rbind(may_Data,june_Date,july_Data,august_Data,september_Data,october_Data)
rbind(may_Data,june_Date,july_Data,august_Data,september_Data,october_Data,november_Data)
View(november_Data)
colnames(october_Data)
colnames(november_Data)
View(august_Data)
View(june_Date)
View(may_Data)
november_Data <- november_Data %>%
dplyr::rename(EDT = EST)
boston_Temp <- rbind(may_Data,june_Date,july_Data,august_Data,september_Data,
october_Data,november_Data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
boston_Temp <- rbind(may_Data,june_Date,july_Data,august_Data,september_Data,
october_Data,november_Data)
# [NOTE: Removing the wind direction column]
temperatureNew <- boston_Temp %>%
dplyr::select(-length(boston_Temp)) %>%
dplyr::rename(Date = EDT)
temperatureNew$Date <- as.Date.character(temperatureNew$Date, "%Y-%m-%d")
# [NOTE: Changing the events based on dates]
temperatureNew$Events <- rapply(as.list(temperatureNew$Events),function(x){ifelse(x == "","Normal",x)})
temperatureNew$Events <- rapply(as.list(temperatureNew$Events),function(x){ifelse(x == "Rain-Thunderstorm","Thunderstorm",x)})
temperatureNew$Events <- rapply(as.list(temperatureNew$Events),function(x){ifelse(x == "Fog-Rain","Rain",x)})
temperatureNew$Events <- rapply(as.list(temperatureNew$Events),function(x){ifelse(x == "Fog-Rain-Thunderstorm","Thunderstorm",x)})
# [NOTE: Adding Comfortable Zones]
temperatureNew$`MeanDew PointF`
temperatureNew$CZone <- "NA"
temperatureNew$CZone <- ifelse(temperatureNew$`MeanDew PointF` <= 60,"Comfortable",temperatureNew$CZone)
temperatureNew$CZone <- ifelse(temperatureNew$`MeanDew PointF` > 60 & temperatureNew$`MeanDew PointF` <= 75,
"Sticky",temperatureNew$CZone)
temperatureNew$CZone <- ifelse(temperatureNew$`MeanDew PointF` > 75,
"Miserable",temperatureNew$CZone)
temperatureNew$Month <- format(temperatureNew$Date, "%B")
temperatureNew
colnames(temperatureNew)
runApp()
runApp()
colnames(temperatureNew)
runApp()
colnames(temperatureData)
temperatureData <- temperatureNew %>%
dplyr::select(Date,`Mean TemperatureF`,`MeanDew PointF`,
`Mean Humidity`,`Mean Sea Level PressureIn`,
`Mean VisibilityMiles`,`Mean VisibilityMiles`,
CloudCover,Events) %>%
dplyr::rename(TemperatureF = `Mean TemperatureF`,
DewPointF = `MeanDew PointF`,Humidity = `Mean Humidity`,
Sea_Pressure = `Mean Sea Level PressureIn`,
Visibility = `Mean VisibilityMiles`)
colnames(temperatureData)
runApp()
regress.exp <- "TemperatureF ~ DewPointF + Humidity +
Sea_Pressure + Visibility"
# lm(regress.exp, data=mydata)
lm(regress.exp, data=temperatureData)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- readRDS("healthexp.Rds")
data <- readRDS("healthexp.Rds")
data <- readRDS("healthexp.Rds")
library(googleCharts)
install.packages("googleCharts")
install.packages("googleCharts")
version()
devtools::install_github("jcheng5/googleCharts")
library(googleCharts)
shiny::runApp()
shiny::runApp()
defaultColors <- c("#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477")
series <- structure(
lapply(defaultColors, function(color) { list(color=color) }),
names = levels(data$Region)
)
yearData <- reactive({
# Filter to the desired year, and put the columns
# in the order that Google's Bubble Chart expects
# them (name, x, y, color, size). Also sort by region
# so that Google Charts orders and colors the regions
# consistently.
df <- data %.%
filter(Year == input$year) %.%
select(Country, Health.Expenditure, Life.Expectancy,
Region, Population) %.%
arrange(Region)
})
lmResults <- reactive({
regress.exp <- "y~x"
lm(regress.exp, data=mydata)
})
library(shiny)
library(shinydashboard)
library(httr)
library(leaflet)
library(dplyr)
library(ggmap)
library(geosphere)
library(data.table)
library(scales)
library(plotly)
library(lazyeval)
library(shinyjs)
library(mongolite)
library(plotly)
library(DT)
library(data.table)
library(dplyr)
df <- data %.%
filter(Year == input$year) %.%
select(Country, Health.Expenditure, Life.Expectancy,
Region, Population) %.%
arrange(Region)
})
yearData <- reactive({
# Filter to the desired year, and put the columns
# in the order that Google's Bubble Chart expects
# them (name, x, y, color, size). Also sort by region
# so that Google Charts orders and colors the regions
# consistently.
df <- data %.%
filter(Year == input$year) %.%
select(Country, Health.Expenditure, Life.Expectancy,
Region, Population) %.%
arrange(Region)
})
data %.%
filter(Year == input$year)
data %>%
filter(Year == input$year)
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- readRDS("healthexp.Rds")
data$Region <- as.factor(data$Region)
shiny::runApp()
series <- structure(
lapply(defaultColors, function(color) { list(color=color) }),
names = levels(data$Region)
)
data %>%
filter(Year == input$year)
rm(list = ls())
data %>%filter(Year == '2010')
data %>% dplyr::filter(Year == '2010')
library(dplyr)
data %>% dplyr::filter(Year == '2010')
shiny::runApp()
shiny::runApp()
devtools::install_github("jcheng5/googleCharts")
library(googleCharts)
shiny::runApp()
if (!("plotrix" %in% names(installed.packages()[,"Package"]))) {install.packages("plotrix")}
suppressMessages(library(plotrix, quietly = TRUE))
if (!("shiny" %in% names(installed.packages()[,"Package"]))) {install.packages("shiny")}
suppressMessages(library(shiny, quietly = TRUE))
if (!("openintro" %in% names(installed.packages()[,"Package"]))) {install.packages("openintro")}
suppressMessages(library(openintro, quietly = TRUE))
shiny::runApp()
if (!("openintro" %in% names(installed.packages()[,"Package"]))) {install.packages("openintro")}
suppressMessages(library(openintro, quietly = TRUE))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
xlim <- list(
min = min(data$Health.Expenditure) - 500,
max = max(data$Health.Expenditure) + 500
)
ylim <- list(
min = min(data$Life.Expectancy),
max = max(data$Life.Expectancy) + 3
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- readRDS("healthexp.Rds")
data$Region <- as.factor(data$Region)
data$Year
min(data$Year)
runApp()
runApp()
rm(lis)
rm(list = ls())
runApp()
runApp()
runApp()
data <- readRDS("./healthexp.Rds")
data$Region <- as.factor(data$Region)
rm(list = ls())
readRDS
runApp()
devtools::install_github("jcheng5/googleCharts")
devtools::install_github("jcheng5/googleCharts",force = TRUE)
library(googleCharts)
runApp()
library(shiny)
library(shinydashboard)
library(httr)
library(leaflet)
library(dplyr)
library(ggmap)
library(geosphere)
library(data.table)
library(scales)
library(plotly)
library(lazyeval)
library(shinyjs)
library(mongolite)
library(plotly)
library(DT)
library(data.table)
library(dplyr)
# devtools::install_github("jcheng5/googleCharts",force = TRUE)
library(googleCharts)
library(shiny)
library(shinydashboard)
library(httr)
library(leaflet)
library(dplyr)
library(ggmap)
library(geosphere)
library(data.table)
library(scales)
library(plotly)
library(lazyeval)
library(shinyjs)
library(mongolite)
library(plotly)
library(DT)
library(data.table)
library(dplyr)
# devtools::install_github("jcheng5/googleCharts",force = TRUE)
library(googleCharts)
runApp()
data <- readRDS("./data/healthexp.Rds")
runApp()
data <- readRDS("./data/healthexp.Rds")
write.csv(x = data,file = "Health.csv",row.names = FALSE)
rm(list = ls())
runApp()
data <- read.csv("./data/Health.csv",header = TRUE)
View(data)
View(data)
runApp()
runApp()
rm(list = ls())
runApp()
data <- read.csv("./data/Health.csv",header = TRUE)
rm(list = ls())
runApp()
runApp()
data <- read.csv("./data/Health.csv",header = TRUE)
data
View(data)
data$Region <- as.factor(data$Region)
runApp()
rm(lsi)
rm(list = ls())
runApp()
runApp()
dataHealth <- read.csv("./data/Health.csv",header = TRUE)
runApp()
runApp()
rm(list = ls())
runApp()
dataHealth <- read.csv("./data/Health.csv",header = TRUE)
runApp()
